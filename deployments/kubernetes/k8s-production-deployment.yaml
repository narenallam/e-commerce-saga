apiVersion: v1
kind: Namespace
metadata:
  name: e-commerce-saga
  labels:
    name: e-commerce-saga
---
# MongoDB StatefulSet with Persistent Volume
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: e-commerce-saga
  labels:
    app: mongodb
    tier: database
spec:
  ports:
  - port: 27017
    targetPort: 27017
    name: mongodb
  selector:
    app: mongodb
  clusterIP: None  # Headless service for StatefulSet
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: e-commerce-saga
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: e-commerce-saga
  labels:
    app: mongodb
    tier: database
spec:
  serviceName: mongodb
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
        tier: database
    spec:
      containers:
      - name: mongodb
        image: mongo:8.0
        ports:
        - containerPort: 27017
          name: mongodb
        volumeMounts:
        - name: mongodb-storage
          mountPath: /data/db
        resources:
          limits:
            memory: 512Mi
            cpu: 500m
          requests:
            memory: 256Mi
            cpu: 250m
        livenessProbe:
          tcpSocket:
            port: 27017
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 27017
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: mongodb-storage
        persistentVolumeClaim:
          claimName: mongodb-pvc
---
# Saga Coordinator - High Priority, 2 Replicas
apiVersion: v1
kind: Service
metadata:
  name: saga-coordinator
  namespace: e-commerce-saga
  labels:
    app: saga-coordinator
    tier: orchestration
spec:
  ports:
  - port: 9000
    targetPort: 9000
    name: http
  selector:
    app: saga-coordinator
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: saga-coordinator
  namespace: e-commerce-saga
  labels:
    app: saga-coordinator
    tier: orchestration
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: saga-coordinator
  template:
    metadata:
      labels:
        app: saga-coordinator
        tier: orchestration
    spec:
      priorityClassName: high-priority
      containers:
      - name: saga-coordinator
        image: e-commerce-saga/saga-coordinator:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 9000
          name: http
        env:
        - name: MONGO_URI
          value: "mongodb://mongodb:27017"
        - name: MONGO_DB
          value: "ecommerce_saga"
        - name: ORDER_SERVICE_URL
          value: "http://order-service:8000"
        - name: INVENTORY_SERVICE_URL
          value: "http://inventory-service:8001"
        - name: PAYMENT_SERVICE_URL
          value: "http://payment-service:8002"
        - name: SHIPPING_SERVICE_URL
          value: "http://shipping-service:8003"
        - name: NOTIFICATION_SERVICE_URL
          value: "http://notification-service:8004"
        - name: PORT
          value: "9000"
        resources:
          limits:
            memory: 256Mi
            cpu: 300m
          requests:
            memory: 128Mi
            cpu: 150m
        livenessProbe:
          httpGet:
            path: /health
            port: 9000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 9000
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Order Service - High Priority, 3 Replicas
apiVersion: v1
kind: Service
metadata:
  name: order-service
  namespace: e-commerce-saga
  labels:
    app: order-service
    tier: business-logic
spec:
  ports:
  - port: 8000
    targetPort: 8000
    name: http
  selector:
    app: order-service
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: e-commerce-saga
  labels:
    app: order-service
    tier: business-logic
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
        tier: business-logic
    spec:
      priorityClassName: high-priority
      containers:
      - name: order-service
        image: e-commerce-saga/order-service:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: MONGO_URI
          value: "mongodb://mongodb:27017"
        - name: MONGO_DB
          value: "ecommerce_saga"
        - name: PORT
          value: "8000"
        resources:
          limits:
            memory: 256Mi
            cpu: 300m
          requests:
            memory: 128Mi
            cpu: 150m
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Payment Service - High Priority, 3 Replicas
apiVersion: v1
kind: Service
metadata:
  name: payment-service
  namespace: e-commerce-saga
  labels:
    app: payment-service
    tier: business-logic
spec:
  ports:
  - port: 8002
    targetPort: 8002
    name: http
  selector:
    app: payment-service
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment-service
  namespace: e-commerce-saga
  labels:
    app: payment-service
    tier: business-logic
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: payment-service
  template:
    metadata:
      labels:
        app: payment-service
        tier: business-logic
    spec:
      priorityClassName: high-priority
      containers:
      - name: payment-service
        image: e-commerce-saga/payment-service:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8002
          name: http
        env:
        - name: MONGO_URI
          value: "mongodb://mongodb:27017"
        - name: MONGO_DB
          value: "ecommerce_saga"
        - name: PORT
          value: "8002"
        resources:
          limits:
            memory: 256Mi
            cpu: 300m
          requests:
            memory: 128Mi
            cpu: 150m
        livenessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Inventory Service - Medium Priority, 2 Replicas
apiVersion: v1
kind: Service
metadata:
  name: inventory-service
  namespace: e-commerce-saga
  labels:
    app: inventory-service
    tier: business-logic
spec:
  ports:
  - port: 8001
    targetPort: 8001
    name: http
  selector:
    app: inventory-service
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: inventory-service
  namespace: e-commerce-saga
  labels:
    app: inventory-service
    tier: business-logic
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: inventory-service
  template:
    metadata:
      labels:
        app: inventory-service
        tier: business-logic
    spec:
      priorityClassName: medium-priority
      containers:
      - name: inventory-service
        image: e-commerce-saga/inventory-service:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8001
          name: http
        env:
        - name: MONGO_URI
          value: "mongodb://mongodb:27017"
        - name: MONGO_DB
          value: "ecommerce_saga"
        - name: PORT
          value: "8001"
        resources:
          limits:
            memory: 256Mi
            cpu: 250m
          requests:
            memory: 128Mi
            cpu: 125m
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Shipping Service - Medium Priority, 2 Replicas
apiVersion: v1
kind: Service
metadata:
  name: shipping-service
  namespace: e-commerce-saga
  labels:
    app: shipping-service
    tier: business-logic
spec:
  ports:
  - port: 8003
    targetPort: 8003
    name: http
  selector:
    app: shipping-service
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shipping-service
  namespace: e-commerce-saga
  labels:
    app: shipping-service
    tier: business-logic
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: shipping-service
  template:
    metadata:
      labels:
        app: shipping-service
        tier: business-logic
    spec:
      priorityClassName: medium-priority
      containers:
      - name: shipping-service
        image: e-commerce-saga/shipping-service:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8003
          name: http
        env:
        - name: MONGO_URI
          value: "mongodb://mongodb:27017"
        - name: MONGO_DB
          value: "ecommerce_saga"
        - name: PORT
          value: "8003"
        resources:
          limits:
            memory: 256Mi
            cpu: 250m
          requests:
            memory: 128Mi
            cpu: 125m
        livenessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Notification Service - Low Priority, 1 Replica
apiVersion: v1
kind: Service
metadata:
  name: notification-service
  namespace: e-commerce-saga
  labels:
    app: notification-service
    tier: support
spec:
  ports:
  - port: 8004
    targetPort: 8004
    name: http
  selector:
    app: notification-service
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service
  namespace: e-commerce-saga
  labels:
    app: notification-service
    tier: support
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: notification-service
  template:
    metadata:
      labels:
        app: notification-service
        tier: support
    spec:
      priorityClassName: low-priority
      containers:
      - name: notification-service
        image: e-commerce-saga/notification-service:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8004
          name: http
        env:
        - name: MONGO_URI
          value: "mongodb://mongodb:27017"
        - name: MONGO_DB
          value: "ecommerce_saga"
        - name: PORT
          value: "8004"
        resources:
          limits:
            memory: 128Mi
            cpu: 200m
          requests:
            memory: 64Mi
            cpu: 100m
        livenessProbe:
          httpGet:
            path: /health
            port: 8004
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8004
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Priority Classes
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: high-priority
value: 1000
globalDefault: false
description: "High priority class for critical services"
---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: medium-priority
value: 500
globalDefault: false
description: "Medium priority class for important services"
---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: low-priority
value: 100
globalDefault: false
description: "Low priority class for support services" 